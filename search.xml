<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础命令ls实现</title>
    <url>/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>​        <code>ls</code>是Linux中十分重要的一个命令，也是使用较多的一个命令。通过ls能够罗列出当前路径或指定路径下文件列表和文件信息。</p>
<span id="more"></span>

<h2 id="系统命令效果"><a href="#系统命令效果" class="headerlink" title="系统命令效果"></a>系统命令效果</h2><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/zackBlog\source_posts\基础命令ls实现\ls.jpg" alt="ls系统命令效果"></p>
<h2 id="ls命令基本功能实现"><a href="#ls命令基本功能实现" class="headerlink" title="ls命令基本功能实现"></a>ls命令基本功能实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ls.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_dir_files</span><span class="params">(<span class="keyword">char</span>* dir_name)</span></span>&#123;</span><br><span class="line">    DIR* dir;</span><br><span class="line">    dir = opendir(dir_name);</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open directory %s error&quot;</span>,dir_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">direntp</span>;</span></span><br><span class="line">    <span class="keyword">while</span>((direntp=readdir(dir))!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,direntp-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* dir_name;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        dir_name=<span class="string">&quot;./&quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DIR:%s\n&quot;</span>,dir_name);</span><br><span class="line">        get_dir_files(dir_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(--argc)&#123;</span><br><span class="line">            dir_name=argv[argc];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;DIR:%s\n&quot;</span>,dir_name);</span><br><span class="line">            get_dir_files(dir_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o ls ls.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个ls的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./ls ./ ../</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/zackBlog\source_posts\基础命令ls实现\myls.jpg" alt="myls效果"></p>
<h2 id="ls-l参数实现"><a href="#ls-l参数实现" class="headerlink" title="ls -l参数实现"></a>ls -l参数实现</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fileinfo.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>*</span></span><br><span class="line"><span class="function"><span class="title">get_file_mode</span><span class="params">(struct stat info)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取文件类型</span></span><br><span class="line">    <span class="keyword">char</span> file_type=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(S_ISLNK(info.st_mode)) file_type=<span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISREG(info.st_mode)) file_type=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISDIR(info.st_mode)) file_type=<span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISCHR(info.st_mode)) file_type=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISBLK(info.st_mode)) file_type=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISFIFO(info.st_mode)) file_type=<span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S_ISSOCK(info.st_mode)) file_type=<span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    <span class="comment">//Debug</span></span><br><span class="line">    <span class="comment">//printf(&quot;%c&quot;,file_type);</span></span><br><span class="line">    <span class="comment">//获取文件权限</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp_buf[] = <span class="string">&quot;rwxrwxrwx&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(info.st_mode&amp;(<span class="number">1</span>&lt;&lt;(<span class="number">8</span>-i))) buf[i]=tmp_buf[i];</span><br><span class="line">        <span class="keyword">else</span> buf[i]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* mode=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">11</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span>((code=<span class="built_in">sprintf</span>(mode,<span class="string">&quot;%c%s&quot;</span>,file_type,buf))==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;code:%d\tformat mode %o to string error\n&quot;</span>,code,info.st_mode);</span><br><span class="line">        <span class="keyword">return</span> mode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_file_info</span><span class="params">(<span class="keyword">char</span>* file_name)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span>((code=stat(file_name,&amp;info))!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;get file %s stat error\n&quot;</span>,file_name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FileMode:%o\nFileUserID:%d\nFileGroupID:%d\nFileLinks:%ld\nFileSize:%ld\nFileModifyTime:%ld\n&quot;</span>,info.st_mode,info.st_uid,info.st_gid,info.st_nlink,info.st_size,info.st_mtime);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span>* <span class="title">psd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">grp</span>;</span></span><br><span class="line">    psd=getpwuid(info.st_uid);</span><br><span class="line">    grp=getgrgid(info.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UserName:%s\nGroupName:%s\n&quot;</span>,psd-&gt;pw_name,grp-&gt;gr_name);</span><br><span class="line">    <span class="keyword">char</span>* modifyTime;</span><br><span class="line">    modifyTime=ctime(&amp;info.st_mtime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FormateModifyTime:%s&quot;</span>,modifyTime);</span><br><span class="line">    <span class="keyword">char</span>* mode = get_file_mode(info);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FormatFileMode:%s\n&quot;</span>,mode);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* fileName;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span> || argc &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;filename is NULL or parma is so many\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fileName=argv[<span class="number">1</span>];</span><br><span class="line">    get_file_info(fileName);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行-1"><a href="#编译执行-1" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o fileinfo fileinfo.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个fileinfo的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./fileinfo main.c</span><br></pre></td></tr></table></figure>

<h3 id="执行效果-1"><a href="#执行效果-1" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/zackBlog\source_posts\基础命令ls实现\fileinfo.jpg" alt="fileinfo实现效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>ls命令</tag>
      </tags>
  </entry>
</search>
