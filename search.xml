<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言库函数解析命令行使用</title>
    <url>/2021/12/13/C%E8%AF%AD%E8%A8%80%E5%BA%93%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="C语言命令行解析"><a href="#C语言命令行解析" class="headerlink" title="C语言命令行解析"></a>C语言命令行解析</h2><p>​        C 的库函数中提供了两个函数可以用来帮助我们解析命令行参数：<code>getopt</code>、<code>getopt_long</code>。<code>getopt</code>可以解析短参数，所谓短参数就是指选项前只有一个“-”(如<code>-t</code>)，而 <code>getopt_long</code> 则支持短参数跟长参数(如<code>--prefix</code>)。</p>
<span id="more"></span>

<h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><h3 id="getopt函数"><a href="#getopt函数" class="headerlink" title="getopt函数"></a>getopt函数</h3><p>函数定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * <span class="keyword">const</span> argv[],<span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;   <span class="comment">//当前选项参数字串（如果有）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind;     <span class="comment">//argv的当前索引值</span></span><br></pre></td></tr></table></figure>

<p>函数参数：</p>
<p><code>argc</code>: 通常为main函数中的<code>argc</code><br><code>argv</code>: 通常为main函数中的<code>argv</code><br><code>optstring</code>: 用来指定选项的内容(如:<code>ab:c::</code>)，它由多个部分组成，表示的意义分别为：<br>1 单个字符，表示选项<br>2 单个字符后接一个冒号<code>:</code>表示该选项后必须跟一个参数。参数紧跟在选项后或者以空格隔开。该参数的指针赋给<code>optarg</code><br>3 单个字符后跟两个冒号<code>::</code>，表示该选项后可以跟一个参数，也可以不跟。如果跟一个参数，参数必须紧跟在选项后不能以空格隔开。该参数的指针赋给<code>optarg函数返回值：</code><br>函数返回值：</p>
<p>调用该函数将返回解析到的当前选项，该选项的参数将赋给<code>optarg</code>，如果该选项没有参数，则<code>optarg</code>为<code>NULL</code></p>
<h3 id="getopt-long函数"><a href="#getopt-long函数" class="headerlink" title="getopt_long函数"></a>getopt_long函数</h3><p>函数定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],<span class="keyword">const</span> <span class="keyword">char</span> *optstring,<span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>函数参数及返回值：前面三个参数跟 <code>getopt</code> 函数一样(解析到短参数时返回值跟<code>getopt</code>一样)，而长参数的解析则与 <code>longopts</code> 参数相关，该参数使用如下的结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line">　　<span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">　　<span class="comment">/*</span></span><br><span class="line"><span class="comment">　　　　表示参数的个数</span></span><br><span class="line"><span class="comment">　　　　no_argument(或者0)，表示该选项后面不跟参数值</span></span><br><span class="line"><span class="comment">　　　　required_argument(或者1)，表示该选项后面一定跟一个参数</span></span><br><span class="line"><span class="comment">　　　　optional_argument(或者2)，表示该选项后面的参数可选</span></span><br><span class="line"><span class="comment">　　*/</span></span><br><span class="line">　　<span class="keyword">int</span> has_arg;</span><br><span class="line">　　<span class="keyword">int</span> *flag;                <span class="comment">//如果flag为NULL，则函数会返回下面val参数的值；否则返回0，并将val的值赋予flag所指向的内存</span></span><br><span class="line">　　<span class="keyword">int</span> val;                  <span class="comment">//配合flag来决定返回值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="命令行解析实例"><a href="#命令行解析实例" class="headerlink" title="命令行解析实例"></a>命令行解析实例</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getopt.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_opt_default</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    <span class="keyword">bool</span> a=<span class="literal">false</span>,b=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;ab:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                a = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                b = <span class="literal">true</span>;</span><br><span class="line">                s = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*optarg));</span><br><span class="line">                <span class="built_in">strcpy</span>(s, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s [-b print string] [-a]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;opt contains parma &#x27;a&#x27;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;opt contains parma &#x27;b&#x27;,context is %s\n&quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_opt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>, required_argument, <span class="literal">NULL</span>, <span class="string">&#x27;n&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;age&quot;</span>, optional_argument, <span class="literal">NULL</span>, <span class="string">&#x27;a&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;print&quot;</span>, no_argument, <span class="literal">NULL</span>, <span class="string">&#x27;p&#x27;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt_long(argc, argv, <span class="string">&quot;n:a::p&quot;</span>, long_options, <span class="literal">NULL</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;name is %s\n&quot;</span>, optarg);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: age = atoi(optarg);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>: p = <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage %s [-n] name [-a age] [-p]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (age) <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;age is %d\n&quot;</span>, age);</span><br><span class="line">    <span class="keyword">if</span> (p) <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;print message\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//get_opt_default(argc,argv);</span></span><br><span class="line">    get_opt_long(argc,argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o getopt getopt.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个getopt的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./getopt -n kawaii -a 12 -p</span><br><span class="line">or</span><br><span class="line">./getopt --name kawaii -age 13 --<span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/12/13/C%E8%AF%AD%E8%A8%80%E5%BA%93%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/getopt.jpg" alt="getopt执行效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>命令行解析</tag>
      </tags>
  </entry>
  <entry>
    <title>cp文件夹拷贝实现</title>
    <url>/2021/12/13/cp%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="cp-r命令"><a href="#cp-r命令" class="headerlink" title="cp -r命令"></a>cp -r命令</h2><p>​        <code>cp -r</code>实现文件夹拷贝</p>
<span id="more"></span>

<h2 id="cpdir实现"><a href="#cpdir实现" class="headerlink" title="cpdir实现"></a>cpdir实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cpdir.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libgen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">copy_file</span><span class="params">(<span class="keyword">int</span> source_fd, <span class="keyword">char</span>* target_file_name)</span></span>&#123;</span><br><span class="line">    <span class="comment">//fprintf(stdout,&quot;target_file_name:%s\n&quot;,target_file_name);</span></span><br><span class="line">    <span class="keyword">int</span> target_fd, input, <span class="keyword">override</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ok;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> r_count, w_count;</span><br><span class="line">    <span class="comment">//judge file is exist</span></span><br><span class="line">    <span class="comment">// F_OK : file exist</span></span><br><span class="line">    <span class="keyword">if</span>( !access(target_file_name, F_OK) )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, target_file_name);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (input = <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ok)) != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;please input &#x27;y&#x27; or &#x27;n&#x27; character !\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, target_file_name);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( ok == <span class="string">&#x27;y&#x27;</span> )&#123;</span><br><span class="line">                <span class="keyword">override</span> = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( ok == <span class="string">&#x27;n&#x27;</span> )&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;please input &#x27;y&#x27; or &#x27;n&#x27; character !\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, target_file_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">override</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">override</span>) &#123;</span><br><span class="line">        <span class="comment">/* create||open target file */</span></span><br><span class="line">        <span class="keyword">if</span>( (target_fd = open(target_file_name, O_WRONLY | O_CREAT | O_TRUNC, S_IWUSR | S_IRUSR | S_IWGRP | S_IRGRP | S_IROTH)) == <span class="number">-1</span> )&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s error\n&quot;</span>, target_file_name);</span><br><span class="line">            perror(target_file_name);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* cpoy file context*/</span></span><br><span class="line">        <span class="keyword">while</span>( (r_count = read(source_fd, &amp;buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            w_count = write(target_fd, &amp;buf, r_count);</span><br><span class="line">            <span class="keyword">if</span>( w_count != r_count )&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;inconsistent reading and writing !\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        close(target_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">copy_link_file</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dest)</span></span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> len;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> ((len = readlink(src, buf, BUFFER_SIZE - <span class="number">1</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;linkfile:%s\n&quot;, buf);</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;readlink %s error\n&quot;</span>, src);</span><br><span class="line">        perror(src);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((ret = symlink(buf, dest)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create new symbolic link file (%s) filed\n&quot;</span>, dest);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">copy_dir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src_dir, <span class="keyword">const</span> <span class="keyword">char</span> *dest_dir, <span class="keyword">const</span> <span class="keyword">char</span> *dir_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *dest_dir_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="number">256</span>));</span><br><span class="line">    <span class="keyword">char</span> *src = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="number">256</span>));</span><br><span class="line">    <span class="keyword">char</span> *dest = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="number">256</span>));</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, source_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">state</span>;</span></span><br><span class="line">    DIR *dir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//fprintf(stdout, &quot;src_dir:%s\ndest_dir:%s\ndir_name:%s\n&quot;, src_dir, dest_dir, dir_name);</span></span><br><span class="line">    <span class="keyword">if</span> ((ret = <span class="built_in">sprintf</span>(dest_dir_name, <span class="string">&quot;%s/%s&quot;</span>, dest_dir, dir_name)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;gen dest dir name failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* dest dir is not exist */</span></span><br><span class="line">    <span class="keyword">if</span> (access(dest_dir_name, F_OK)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (( ret = mkdir(dest_dir_name, <span class="number">0777</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create dir error\n&quot;</span>);</span><br><span class="line">            perror(dest_dir_name);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((dir = opendir(src_dir)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s dir error\n&quot;</span>, dest_dir_name);</span><br><span class="line">        perror(dest_dir_name);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((entry = readdir(dir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;file :%s\n&quot;, entry-&gt;d_name);</span></span><br><span class="line">        <span class="comment">/* exclude . and .. */</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>)||(<span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//printf(&quot;src_dir:%s\nd_name:%s\n&quot;, src_dir, entry-&gt;d_name);</span></span><br><span class="line">        <span class="keyword">if</span> ((ret = <span class="built_in">sprintf</span>(src, <span class="string">&quot;%s/%s&quot;</span>, src_dir, entry-&gt;d_name)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;gen src file name failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((ret = <span class="built_in">sprintf</span>(dest, <span class="string">&quot;%s/%s&quot;</span>, dest_dir_name, entry-&gt;d_name)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;gen src file name failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;src:%s\ndest:%s\n&quot;, src, dest);</span></span><br><span class="line">        <span class="keyword">if</span> ((ret = lstat(src, &amp;state)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;get file info error\n&quot;</span>);</span><br><span class="line">            perror(src);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//printf(&quot;src:%s mode:%o\n&quot;, src, state.st_mode);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (S_ISLNK(state.st_mode)) &#123;</span><br><span class="line">            <span class="comment">/* cpoy link file */</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;copy link file %s\n&quot;</span>, src);</span><br><span class="line">            ret = copy_link_file(src, dest);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(state.st_mode)) &#123;</span><br><span class="line">            <span class="comment">/* open source file */</span></span><br><span class="line">            <span class="keyword">if</span>((source_fd = open(src, O_RDONLY)) == <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s error\n&quot;</span>, src);</span><br><span class="line">                perror(src);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((ret = copy_file(source_fd, dest)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                close(source_fd);</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            close(source_fd);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(state.st_mode)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (( ret = copy_dir(src, dest_dir_name, entry-&gt;d_name)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;copy dir %s to %s\n&quot;</span>, entry-&gt;d_name, dest_dir_name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;file %s model is not support\n&quot;</span>, entry-&gt;d_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* check input parameter */</span></span><br><span class="line">    <span class="keyword">if</span>( argc != <span class="number">3</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage:%s source_dir target_path\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((ret = stat(argv[<span class="number">1</span>], &amp;state)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;get file %s info error\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!S_ISDIR(state.st_mode)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;source file %s type is not dir\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = copy_dir(argv[<span class="number">1</span>], argv[<span class="number">2</span>], basename(argv[<span class="number">1</span>]))) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o cpdir cpdir.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个cpdir的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./cpdir source_dir target_dir</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/12/13/cp%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0/cpdir.jpg" alt="cpdir执行效果"></p>
<p><img src="/2021/12/13/cp%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0/cpdir2.jpg" alt="cpdir执行效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>cp命令</tag>
      </tags>
  </entry>
  <entry>
    <title>find命令实现</title>
    <url>/2022/02/13/find%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>​        Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<span id="more"></span>

<h2 id="find命令实现"><a href="#find命令实现" class="headerlink" title="find命令实现"></a>find命令实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> target[<span class="number">100</span>] = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">match</span><span class="params">(<span class="keyword">char</span> *t, <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*t == <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *s == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*t == <span class="string">&#x27;*&#x27;</span> &amp;&amp; *(t+<span class="number">1</span>) != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *s == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (*t == <span class="string">&#x27;?&#x27;</span> || *t == *s)</span><br><span class="line">        <span class="keyword">return</span> match(t+<span class="number">1</span>, s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (*t == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> match(t+<span class="number">1</span>, s) || match(t, s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">find_file</span><span class="params">(<span class="keyword">char</span> *path)</span></span>&#123;</span><br><span class="line">    DIR *dir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* path dir is not exist */</span></span><br><span class="line">    <span class="keyword">if</span> (access(path, F_OK)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;dir %s is not exist\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((dir = opendir(path)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s dir error\n&quot;</span>, path);</span><br><span class="line">        perror(path);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((entry = readdir(dir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp_path[<span class="number">4096</span>];</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">snprintf</span>(tmp_path, <span class="keyword">sizeof</span>(tmp_path), <span class="string">&quot;%s/%s&quot;</span>, path, entry-&gt;d_name);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;join new path error\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;d_type == DT_DIR) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            ret = find_file(tmp_path);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//debug</span></span><br><span class="line">            <span class="comment">//printf(&quot;FILE: %s\n&quot;, entry-&gt;d_name);</span></span><br><span class="line">            <span class="keyword">if</span> (match(target, entry-&gt;d_name) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;%s/%s\n&quot;</span>, path, entry-&gt;d_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *path;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        path = argv[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;n&#x27;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, <span class="string">&quot;n:&quot;</span>, opts, <span class="literal">NULL</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(target, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s [path default:./] [ -name filename]\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//debug</span></span><br><span class="line">        <span class="comment">//printf(&quot;Target:%s\n&quot;, target);</span></span><br><span class="line">        <span class="keyword">return</span> find_file(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find_file(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall find.c -o find </span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个find的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./find</span><br><span class="line">./find . --name &quot;find&quot;</span><br><span class="line">./find . --name &quot;find*&quot;</span><br><span class="line">./find . --name &quot;find*.c&quot;</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2022/02/13/find%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/find.jpg" alt="my find效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>find命令</tag>
      </tags>
  </entry>
  <entry>
    <title>ln命令实现</title>
    <url>/2021/12/26/ln%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h2><p>​        Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p>
<span id="more"></span>

<h2 id="系统命令效果"><a href="#系统命令效果" class="headerlink" title="系统命令效果"></a>系统命令效果</h2><p><img src="/2021/12/26/ln%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/ln.jpg" alt="ln命令实现"></p>
<h2 id="ln实现"><a href="#ln实现" class="headerlink" title="ln实现"></a>ln实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ln.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hard_link</span><span class="params">(<span class="keyword">char</span> *target_file, <span class="keyword">char</span> *link_file)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sym_link</span><span class="params">(<span class="keyword">char</span> *target_file, <span class="keyword">char</span> *sym_link_file)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unlink_file</span><span class="params">(<span class="keyword">char</span> *target_file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">operator</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage %s [-s] [-d] target_file [link_file]\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;sd&quot;</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                <span class="comment">//printf(&quot;synbolic link\n&quot;);</span></span><br><span class="line">                ret = sym_link(argv[argc<span class="number">-2</span>], argv[argc<span class="number">-1</span>]);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                <span class="comment">//printf(&quot;delete link file\n&quot;);</span></span><br><span class="line">                ret = unlink_file(argv[argc<span class="number">-1</span>]);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage %s [-s] [-d] target_file [link_file]\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;hard link\n&quot;);</span></span><br><span class="line">        ret = hard_link(argv[argc<span class="number">-2</span>], argv[argc<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fprintf(stdout, &quot;return code %d\n&quot;,ret);</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">hard_link</span><span class="params">(<span class="keyword">char</span> *target_file, <span class="keyword">char</span> *link_file)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* judge file is exist */</span></span><br><span class="line">    <span class="keyword">if</span> (access(target_file, F_OK))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;target file (%s) is not exist\n&quot;</span>,target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = link(target_file, link_file)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create new link file (%s) filed\n&quot;</span>, target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">sym_link</span><span class="params">(<span class="keyword">char</span> *target_file, <span class="keyword">char</span> *sym_link_file)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">/* judge file is exist*/</span></span><br><span class="line">    <span class="keyword">if</span> (access(target_file, F_OK))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;target file (%s) is not exist\n&quot;</span>,target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret = symlink(target_file, sym_link_file)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create new symbolic link file (%s) filed\n&quot;</span>, target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">unlink_file</span><span class="params">(<span class="keyword">char</span> *target_file)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* judge file is exist*/</span></span><br><span class="line">    <span class="keyword">if</span> (access(target_file, F_OK))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;target file (%s) is not exist\n&quot;</span>,target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((ret = unlink(target_file)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;unlink file (%s) filed\n&quot;</span>, target_file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = <span class="keyword">operator</span>(argc,argv);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -o ln ln.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个ln的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./ln -s a a_s_my</span><br><span class="line">./ln a a_h_my</span><br><span class="line">./ln -d a_h_my</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/12/26/ln%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/myln.jpg" alt="my ln效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>ln命令</tag>
      </tags>
  </entry>
  <entry>
    <title>rm命令实现</title>
    <url>/2022/01/10/rm%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>​    </p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rm.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>**)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete dir files</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rm_dir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rm_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//juage dir permission</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ismine_dir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ismine_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rm.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">operator</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> r_flag = <span class="number">0</span>, f_flag = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage %s [-r] [-f] [target_dir|target_file]\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;rf&quot;</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">                <span class="comment">//printf(&quot;allow delete dir\n&quot;);</span></span><br><span class="line">                r_flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">                <span class="comment">//printf(&quot;force delete file\n&quot;);</span></span><br><span class="line">                f_flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fprintf(stdout, &quot;return code %d\n&quot;,ret);</span></span><br><span class="line">    <span class="keyword">if</span> ((code = stat(argv[argc<span class="number">-1</span>], &amp;info)) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;get file %s stat error\n&quot;</span>, argv[argc<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (S_ISREG(info.st_mode))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ismine_file(argv[argc<span class="number">-1</span>]))&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;permission is not true!\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (f_flag)&#123;</span><br><span class="line">                rm_file(argv[argc<span class="number">-1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">/* add user chouse */</span></span><br><span class="line">                rm_file(argv[argc<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(info.st_mode))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ismine_dir(argv[argc<span class="number">-1</span>]))&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;permission is not true!\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (r_flag)&#123;</span><br><span class="line">                rm_dir(argv[argc<span class="number">-1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">/* add user chouse */</span></span><br><span class="line">                rm_dir(argv[argc<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ismine_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span>* <span class="title">pwd</span>;</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span> ((code = stat(filename, &amp;info)) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;get file %s stat error\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pwd = getpwuid(info.st_uid);</span><br><span class="line">    <span class="keyword">if</span> (pwd-&gt;pw_uid == getuid())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ismine_dir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* dirname)</span></span>&#123;</span><br><span class="line">    DIR* dir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">rdd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span>* name = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">char</span>* fullpath = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> code = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((dir = opendir(dirname)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;opendir %s error\n&quot;</span>,dirname);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rdd = readdir(dir))&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        name = rdd-&gt;d_name;</span><br><span class="line">        <span class="keyword">while</span>(dirname[index])</span><br><span class="line">            index++;</span><br><span class="line">        <span class="built_in">strcpy</span>(fullpath, dirname);</span><br><span class="line">        <span class="keyword">if</span>(dirname[index<span class="number">-1</span>] != <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="built_in">strcat</span>(fullpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(fullpath, name);</span><br><span class="line">        <span class="keyword">if</span> ((code = stat(dirname, &amp;info)) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;get file %s stat error\n&quot;</span>, dirname);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((S_ISREG(info.st_mode) || S_ISLNK(info.st_mode)) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;.&quot;</span>) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!ismine_file(fullpath))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(info.st_mode) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;.&quot;</span>) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!ismine_dir(fullpath))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;skipping file %s ...\n&quot;</span>, fullpath);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rm_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//if ((ret = remove(filename)) == -1)&#123;</span></span><br><span class="line">    <span class="comment">//    fprintf(stderr, &quot;remove file %s error\n&quot;, filename);</span></span><br><span class="line">    <span class="comment">//    return false;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;delete file %s %d\n&quot;</span>, filename, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rm_dir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* dirname)</span></span>&#123;</span><br><span class="line">    DIR* dir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">rdd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span>* name = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">char</span>* fullpath = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> code = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((dir = opendir(dirname)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;opendir %s error\n&quot;</span>,dirname);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rdd = readdir(dir))&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        name = rdd-&gt;d_name;</span><br><span class="line">        <span class="keyword">while</span>(dirname[index])</span><br><span class="line">            index++;</span><br><span class="line">        <span class="built_in">strcpy</span>(fullpath, dirname);</span><br><span class="line">        <span class="keyword">if</span>(dirname[index<span class="number">-1</span>] != <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="built_in">strcat</span>(fullpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(fullpath, name);</span><br><span class="line">        <span class="keyword">if</span> ((code = stat(dirname, &amp;info)) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;get file %s stat error\n&quot;</span>, dirname);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((S_ISREG(info.st_mode) || S_ISLNK(info.st_mode)) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;.&quot;</span>) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!rm_file(fullpath))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(info.st_mode) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;.&quot;</span>) &amp;&amp; <span class="built_in">strcmp</span>(name,<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!rm_dir(fullpath))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;skipping file %s ...\n&quot;</span>, fullpath);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;delete dir %s \n&quot;</span>, dirname);</span><br><span class="line">    <span class="comment">//return rm_file(dirname);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = <span class="keyword">operator</span>(argc,argv);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>rm命令</tag>
      </tags>
  </entry>
  <entry>
    <title>基础命令cp实现</title>
    <url>/2021/12/05/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4cp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>​        Linux cp（英文全拼：copy file）命令主要用于复制文件或目录。下面是<code>cp</code>命令基础功能的实现</p>
<span id="more"></span>

<h2 id="系统命令效果"><a href="#系统命令效果" class="headerlink" title="系统命令效果"></a>系统命令效果</h2><p><img src="/2021/12/05/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4cp%E5%AE%9E%E7%8E%B0/cat.jpg" alt="cat 系统命令效果"></p>
<h2 id="cp命令基本功能实现"><a href="#cp命令基本功能实现" class="headerlink" title="cp命令基本功能实现"></a>cp命令基本功能实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cp.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> </span></span><br><span class="line"><span class="function"><span class="title">copy_file</span><span class="params">(<span class="keyword">int</span>* source_fd, <span class="keyword">char</span>* target_file_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> target_fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create||open target file */</span></span><br><span class="line">    <span class="keyword">if</span>( (target_fd = open(target_file_name, O_WRONLY | O_CREAT | O_TRUNC, S_IWUSR | S_IRUSR | S_IWGRP | S_IRGRP | S_IROTH)) == <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s error\n&quot;</span>, target_file_name);</span><br><span class="line">        perror(target_file_name);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* cpoy file context*/</span></span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> r_count, w_count;</span><br><span class="line">    <span class="keyword">while</span>( (r_count = read(*source_fd, &amp;buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        w_count = write(target_fd, &amp;buf, r_count);</span><br><span class="line">        <span class="keyword">if</span>( w_count != r_count )&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;inconsistent reading and writing !\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(target_fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> </span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> source_fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* check input parameter */</span></span><br><span class="line">    <span class="keyword">if</span>( argc != <span class="number">3</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage:%s source_file target_file\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open source file */</span></span><br><span class="line">    <span class="keyword">if</span>( (source_fd = open(argv[<span class="number">1</span>], O_RDONLY)) == <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s error\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        perror(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* judge file is exist */</span></span><br><span class="line">    <span class="keyword">int</span> input, res_code;</span><br><span class="line">    <span class="keyword">char</span> ok;</span><br><span class="line">    <span class="comment">// F_OK : file exist</span></span><br><span class="line">    <span class="keyword">if</span>( !access(argv[<span class="number">2</span>], F_OK) )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (input = <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ok)) != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;please input &#x27;y&#x27; or &#x27;n&#x27; character !\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( ok == <span class="string">&#x27;y&#x27;</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( (res_code = copy_file(&amp;source_fd, argv[<span class="number">2</span>])) == <span class="number">-1</span> )&#123;</span><br><span class="line">                    close(source_fd);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( ok == <span class="string">&#x27;n&#x27;</span> )&#123;</span><br><span class="line">                close(source_fd);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;please input &#x27;y&#x27; or &#x27;n&#x27; character !\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;file %s is already exist,whether to override ? (y/n)&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( (res_code = copy_file(&amp;source_fd, argv[<span class="number">2</span>])) == <span class="number">-1</span> )&#123;</span><br><span class="line">        close(source_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(source_fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -o cp cp.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成cp的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./cp cp_source cp_target</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p>​        文件不存在</p>
<p><img src="/2021/12/05/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4cp%E5%AE%9E%E7%8E%B0/mycp_notexist.jpg" alt="文件不存在情况"></p>
<p>​        文件存在</p>
<p><img src="/2021/12/05/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4cp%E5%AE%9E%E7%8E%B0/mycp_exist.jpg" alt="文件存在情况"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>cp命令</tag>
      </tags>
  </entry>
  <entry>
    <title>基础命令ls实现</title>
    <url>/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>​        <code>ls</code>是Linux中十分重要的一个命令，也是使用较多的一个命令。通过ls能够罗列出当前路径或指定路径下文件列表和文件信息。</p>
<span id="more"></span>

<h2 id="系统命令效果"><a href="#系统命令效果" class="headerlink" title="系统命令效果"></a>系统命令效果</h2><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/ls.jpg" alt="ls系统命令效果"></p>
<h2 id="ls命令基本功能实现"><a href="#ls命令基本功能实现" class="headerlink" title="ls命令基本功能实现"></a>ls命令基本功能实现</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ls.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_dir_files</span><span class="params">(<span class="keyword">char</span>* dir_name)</span></span>&#123;</span><br><span class="line">    DIR* dir;</span><br><span class="line">    dir = opendir(dir_name);</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open directory %s error&quot;</span>, dir_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">direntp</span>;</span></span><br><span class="line">    <span class="keyword">while</span>( (direntp = readdir(dir)) != <span class="literal">NULL</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, direntp-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* dir_name;</span><br><span class="line">    <span class="keyword">if</span> ( argc &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        dir_name = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DIR:%s\n&quot;</span>, dir_name);</span><br><span class="line">        get_dir_files(dir_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( --argc )&#123;</span><br><span class="line">            dir_name = argv[argc];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;DIR:%s\n&quot;</span>, dir_name);</span><br><span class="line">            get_dir_files(dir_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o ls ls.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个ls的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./ls ./ ../</span><br></pre></td></tr></table></figure>

<h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/myls.jpg" alt="myls效果"></p>
<h2 id="ls-l参数实现"><a href="#ls-l参数实现" class="headerlink" title="ls -l参数实现"></a>ls -l参数实现</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fileinfo.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>*</span></span><br><span class="line"><span class="function"><span class="title">get_file_mode</span><span class="params">(struct stat info)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取文件类型</span></span><br><span class="line">    <span class="keyword">char</span> file_type = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>( S_ISLNK(info.st_mode) ) file_type = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISREG(info.st_mode) ) file_type = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISDIR(info.st_mode) ) file_type = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISCHR(info.st_mode) ) file_type = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISBLK(info.st_mode) ) file_type = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISFIFO(info.st_mode) ) file_type = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( S_ISSOCK(info.st_mode) ) file_type = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    <span class="comment">//Debug</span></span><br><span class="line">    <span class="comment">//printf(&quot;%c&quot;,file_type);</span></span><br><span class="line">    <span class="comment">//获取文件权限</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp_buf[] = <span class="string">&quot;rwxrwxrwx&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( info.st_mode&amp;(<span class="number">1</span>&lt;&lt;(<span class="number">8</span>-i)) ) buf[i] = tmp_buf[i];</span><br><span class="line">        <span class="keyword">else</span> buf[i] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* mode = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">11</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span>( (code = <span class="built_in">sprintf</span>(mode, <span class="string">&quot;%c%s&quot;</span>, file_type,buf)) == <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;code:%d\tformat mode %o to string error\n&quot;</span>, code, info.st_mode);</span><br><span class="line">        <span class="keyword">return</span> mode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">get_file_info</span><span class="params">(<span class="keyword">char</span>* file_name)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">if</span>( (code = stat(file_name,&amp;info)) != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;get file %s stat error\n&quot;</span>, file_name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FileMode:%o\nFileUserID:%d\nFileGroupID:%d\nFileLinks:%ld\nFileSize:%ld\nFileModifyTime:%ld\n&quot;</span>, info.st_mode, info.st_uid, info.st_gid, info.st_nlink, info.st_size, info.st_mtime);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span>* <span class="title">psd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">grp</span>;</span></span><br><span class="line">    psd = getpwuid(info.st_uid);</span><br><span class="line">    grp = getgrgid(info.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UserName:%s\nGroupName:%s\n&quot;</span>, psd-&gt;pw_name, grp-&gt;gr_name);</span><br><span class="line">    <span class="keyword">char</span>* modifyTime;</span><br><span class="line">    modifyTime = ctime(&amp;info.st_mtime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FormateModifyTime:%s&quot;</span>, modifyTime);</span><br><span class="line">    <span class="keyword">char</span>* mode = get_file_mode(info);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FormatFileMode:%s\n&quot;</span>, mode);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* fileName;</span><br><span class="line">    <span class="keyword">if</span> ( argc &lt; <span class="number">2</span> || argc &gt; <span class="number">3</span> )  &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;filename is NULL or parma is so many\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fileName = argv[<span class="number">1</span>];</span><br><span class="line">    get_file_info(fileName);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译执行-1"><a href="#编译执行-1" class="headerlink" title="编译执行"></a>编译执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">gcc -Wall -v -o fileinfo fileinfo.c</span><br><span class="line"></span><br><span class="line">//编译完成之后生成一个fileinfo的二进制文件</span><br><span class="line">//执行</span><br><span class="line">./fileinfo main.c</span><br></pre></td></tr></table></figure>

<h3 id="执行效果-1"><a href="#执行效果-1" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2021/11/28/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4ls%E5%AE%9E%E7%8E%B0/fileinfo.jpg" alt="fileinfo实现效果"></p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>ls命令</tag>
      </tags>
  </entry>
</search>
